import { __decorate, __extends } from "tslib";
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var WeChatPay = /** @class */ (function (_super) {
    __extends(WeChatPay, _super);
    function WeChatPay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WeChatPay.prototype.sendPaymentRequest = function (arg0) { return cordova(this, "sendPaymentRequest", {}, arguments); };
    WeChatPay.prototype.auth = function (scope, state) { return cordova(this, "auth", {}, arguments); };
    WeChatPay.pluginName = "WeChatPay";
    WeChatPay.plugin = "cordova-plugin-vei-wechat-pay";
    WeChatPay.pluginRef = "WechatVEI";
    WeChatPay.repo = "https://bitbucket.org/veiwebdevteam/cordova-plugin-vei-wechat-pay";
    WeChatPay.install = "cordova plugin add cordova-plugin-vei-wechat-pay --variable wechatappid=YOUR_WECHAT_APPID --variable universallink=YOUR_UNIVERSAL_LINK";
    WeChatPay.installVariables = ["wechatappid", "universallink"];
    WeChatPay.platforms = ["Android", "iOS"];
    WeChatPay = __decorate([
        Injectable()
    ], WeChatPay);
    return WeChatPay;
}(IonicNativePlugin));
export { WeChatPay };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dlLWNoYXQtcGF5L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7R0FVRztBQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBMEYsTUFBTSxvQkFBb0IsQ0FBQzs7SUFrQzdGLDZCQUFpQjs7OztJQUk5QyxzQ0FBa0IsYUFBQyxJQUFTO0lBRzVCLHdCQUFJLGFBQUMsS0FBVSxFQUFFLEtBQVU7Ozs7Ozs7O0lBUGhCLFNBQVM7UUFEckIsVUFBVSxFQUFFO09BQ0EsU0FBUztvQkE5Q3RCO0VBOEMrQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBpcyBhIHRlbXBsYXRlIGZvciBuZXcgcGx1Z2luIHdyYXBwZXJzXG4gKlxuICogVE9ETzpcbiAqIC0gQWRkL0NoYW5nZSBpbmZvcm1hdGlvbiBiZWxvd1xuICogLSBEb2N1bWVudCB1c2FnZSAoaW1wb3J0aW5nLCBleGVjdXRpbmcgbWFpbiBmdW5jdGlvbmFsaXR5KVxuICogLSBSZW1vdmUgYW55IGltcG9ydHMgdGhhdCB5b3UgYXJlIG5vdCB1c2luZ1xuICogLSBSZW1vdmUgYWxsIHRoZSBjb21tZW50cyBpbmNsdWRlZCBpbiB0aGlzIHRlbXBsYXRlLCBFWENFUFQgdGhlIEBQbHVnaW4gd3JhcHBlciBkb2NzIGFuZCBhbnkgb3RoZXIgZG9jcyB5b3UgYWRkZWRcbiAqIC0gUmVtb3ZlIHRoaXMgbm90ZVxuICpcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIENvcmRvdmFJbnN0YW5jZSwgSW5zdGFuY2VQcm9wZXJ0eSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBuYW1lIFdlIENoYXQgUGF5XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGRvZXMgc29tZXRoaW5nXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBXZUNoYXRQYXkgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3dlLWNoYXQtcGF5JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB3ZUNoYXRQYXk6IFdlQ2hhdFBheSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMud2VDaGF0UGF5LmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnV2VDaGF0UGF5JyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tdmVpLXdlY2hhdC1wYXknLCAvLyBucG0gcGFja2FnZSBuYW1lLCBleGFtcGxlOiBjb3Jkb3ZhLXBsdWdpbi1jYW1lcmFcbiAgcGx1Z2luUmVmOiAnV2VjaGF0VkVJJywgLy8gdGhlIHZhcmlhYmxlIHJlZmVyZW5jZSB0byBjYWxsIHRoZSBwbHVnaW4sIGV4YW1wbGU6IG5hdmlnYXRvci5nZW9sb2NhdGlvblxuICByZXBvOiAnaHR0cHM6Ly9iaXRidWNrZXQub3JnL3ZlaXdlYmRldnRlYW0vY29yZG92YS1wbHVnaW4tdmVpLXdlY2hhdC1wYXknLCAvLyB0aGUgZ2l0aHViIHJlcG9zaXRvcnkgVVJMIGZvciB0aGUgcGx1Z2luXG4gIGluc3RhbGw6ICdjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tdmVpLXdlY2hhdC1wYXkgLS12YXJpYWJsZSB3ZWNoYXRhcHBpZD1ZT1VSX1dFQ0hBVF9BUFBJRCAtLXZhcmlhYmxlIHVuaXZlcnNhbGxpbms9WU9VUl9VTklWRVJTQUxfTElOSycsIC8vIE9QVElPTkFMIGluc3RhbGwgY29tbWFuZCwgaW4gY2FzZSB0aGUgcGx1Z2luIHJlcXVpcmVzIHZhcmlhYmxlc1xuICBpbnN0YWxsVmFyaWFibGVzOiBbXCJ3ZWNoYXRhcHBpZFwiLCBcInVuaXZlcnNhbGxpbmtcIl0sIC8vIE9QVElPTkFMIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddIC8vIEFycmF5IG9mIHBsYXRmb3JtcyBzdXBwb3J0ZWQsIGV4YW1wbGU6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXZUNoYXRQYXkgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG5cblxuICBAQ29yZG92YSgpXG4gIHNlbmRQYXltZW50UmVxdWVzdChhcmcwOiBhbnkpOiBQcm9taXNlPGFueT4ge3JldHVybjt9XG5cbiAgQENvcmRvdmEoKVxuICBhdXRoKHNjb3BlOiBhbnksIHN0YXRlOiBhbnkpOiBQcm9taXNlPGFueT4geyByZXR1cm47IH1cblxufVxuIl19